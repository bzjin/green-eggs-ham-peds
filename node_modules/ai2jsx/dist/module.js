import { useState, useEffect } from 'react';
import { sendFrameHeight, initFrame } from '@newswire/frames';
import debounce from 'lodash/debounce';

function _createForOfIteratorHelper(o) { if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (o = _unsupportedIterableToArray(o))) { var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var it, normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(n); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

var NULL_COMPONENT = function NULL_COMPONENT() {
  return null;
};

var getWidth = function getWidth() {
  return window.innerWidth;
};

var useLayoutBreakpoint = function useLayoutBreakpoint(LAYOUTS) {
  var layoutState = useState(NULL_COMPONENT);
  var layout = layoutState[0];
  var updateLayout = layoutState[1];

  var findLayout = function findLayout() {
    var layoutKeys = Object.keys(LAYOUTS).sort(function (a, b) {
      return LAYOUTS[b].breakpoint - LAYOUTS[a].breakpoint;
    });
    var width = getWidth();

    if (width > LAYOUTS[layoutKeys[0]].breakpoint) {
      return LAYOUTS[layoutKeys[0]].component;
    }

    var lastIndex = layoutKeys.length - 1;

    if (width < LAYOUTS[layoutKeys[lastIndex]].breakpoint) {
      return LAYOUTS[layoutKeys[lastIndex]].component;
    }

    var _iterator = _createForOfIteratorHelper(layoutKeys),
        _step;

    try {
      for (_iterator.s(); !(_step = _iterator.n()).done;) {
        var key = _step.value;
        var layoutConfig = LAYOUTS[key];

        if (width >= layoutConfig.breakpoint) {
          return layoutConfig.component;
        }
      }
    } catch (err) {
      _iterator.e(err);
    } finally {
      _iterator.f();
    }

    return NULL_COMPONENT;
  };

  useEffect(function () {
    var handleResize = function handleResize() {
      var newLayout = findLayout();

      if (newLayout !== layout) {
        updateLayout(newLayout);
      }
    };

    handleResize();
    window.addEventListener('resize', debounce(handleResize, 100));
    return function () {
      window.removeEventListener('resize', handleResize);
    };
  }, []);
  useEffect(function () {
    sendFrameHeight();
  }, [layout]);
  return layout;
};

var useInitFrame = function useInitFrame(LAYOUTS) {
  useEffect(function () {
    initFrame();
  }, []);
};

export { useInitFrame, useLayoutBreakpoint as useLayoutBreakpoints };
